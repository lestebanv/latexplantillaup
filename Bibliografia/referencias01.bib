% Encoding: UTF-8
@article{HUYSMANS2010656,
title = "Using the DEMO methodology for modeling open source software development processes",
journal = "Information and Software Technology",
volume = "52",
number = "6",
pages = "656 - 671",
year = "2010",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2010.02.002",
url = "http://www.sciencedirect.com/science/article/pii/S0950584910000157",
author = "Philip Huysmans and Kris Ven and Jan Verelst",
keywords = "Software process modeling, Open source software, DEMO, Enterprise ontology",
abstract = "Context
Open source software development (OSSD) process modeling has received increasing interest in recent years. These efforts aim to identify common elements in the development process between multiple open source software (OSS) projects. However, the complexity inherent to OSSD process modeling puts significant demands on the modeling language.
Objective
In this paper, we propose that the Design and Engineering Methodology for Organizations (DEMO) may provide an interesting alternative to develop OSSD process models. DEMO exhibits two unique features within the context of OSSD process modeling. First, DEMO analyzes processes at the ontological level and provides high-level process descriptions, instead of focusing on the implementation level. Second, DEMO studies the communication patterns between human actors, instead of the sequences in which activities are performed.
Method
We investigate the feasibility of using DEMO to construct OSSD process models by means of a case study. DEMO models were constructed to describe the NetBeans Requirements and Release process. In addition, the quality of these DEMO models was evaluated using a quality framework for conceptual modeling.
Results
Our results showed that our DEMO models exhibited a high level of abstraction, thereby reducing the complexity of the OSSD process models. In addition, the evaluation of the models developed in this paper by using the quality framework for conceptual modeling showed that the models were of high quality.
Conclusions
We have shown that the DEMO methodology can be successfully used to model OSSD processes and to obtain abstract and high-quality OSSD process models. However, given some potential drawbacks with respect to understandability and implementability, we primarily propose the use of DEMO within OSSD process modeling as an analysis tool that should be complemented with other techniques and models for communication and reenactment purposes."
}
@article{ALVERTIS201673,
title = "User Involvement in Software Development Processes",
journal = "Procedia Computer Science",
volume = "97",
pages = "73 - 83",
year = "2016",
note = "2nd International Conference on Cloud Forward: From Distributed to Complete Computing",
issn = "1877-0509",
doi = "https://doi.org/10.1016/j.procs.2016.08.282",
url = "http://www.sciencedirect.com/science/article/pii/S1877050916320981",
author = "Iosif Alvertis and Sotiris Koussouris and Dimitris Papaspyros and Evangelos Arvanitakis and Spiros Mouzakitis and Sebastian Franken and Sabine Kolvenbach and Wolgang Prinz",
keywords = "Cloud Platform, Collaboration, Software Development, User Engagement, Ideation, Crowdsourcing, Cloud Computing",
abstract = "Costs of software development and deployment are decreasing due to numerous open source projects and novel Cloud-based services (IaaS, PaaS, SaaS), but competition increases due to lowering entry barriers. The need to bring developers closer to their customer becomes vital for success, especially involving users into the very early stages of software development. This allows detecting flaws of conceptual and design nature, minimize unnecessary development costs, and warrant relevance for customers. This paper presents the CloudTeams methodology and platform that aim to bridge this gap, based on an existing groupware system supporting the notion of collaborative software development."
}
@article{DANIEL2018,
title = "Sourcing knowledge in open source software projects: The impacts of internal and external social capital on project success",
journal = "The Journal of Strategic Information Systems",
year = "2018",
issn = "0963-8687",
doi = "https://doi.org/10.1016/j.jsis.2018.04.002",
url = "http://www.sciencedirect.com/science/article/pii/S0963868716301251",
author = "Sherae Daniel and Vishal Midha and Anol Bhattacherhjee and Shivendu Singh",
keywords = "Open source projects, Diversity, Development difference, Participant difference, Connectedness, Success",
abstract = "Open source software (OSS) development has become an essential element of IT strategy: many firms seek OSS as a strategic means of unlocking the business value in external developer communities and internal knowledge sources. However, integrating external and internal sources of social capital is challenging and identifying appropriate integration strategies is crucial for the success of such endeavors. This study examines the simultaneous effects of external and internal sources of social capital, in the form of participant and project differences, and examines how they interact to influence OSS project success. We propose a taxonomy of participant differences (language, role, and contribution) and project differences (development environment and connectedness) and postulate their main and moderating effects on project success. Using a four-year panel data set of 329 SourceForge projects, we show that development environment difference has a curvilinear relationship with success and that connectedness reduces the positive impact of role and contribution diversity on project success. We also show that when development environment difference is moderate, the impact of role diversity is the most positive. We present the implications of these findings for theory and practice."
}
@article{PILAR201495,
title = "Semi-automated Tool Recommender for Software Development Processes",
journal = "Electronic Notes in Theoretical Computer Science",
volume = "302",
pages = "95 - 109",
year = "2014",
note = "Proceedings of the XXXIX Latin American Computing Conference (CLEI 2013)",
issn = "1571-0661",
doi = "https://doi.org/10.1016/j.entcs.2014.01.022",
url = "http://www.sciencedirect.com/science/article/pii/S1571066114000231",
author = "Marina Pilar and Jocelyn Simmonds and Hern√°n Astudillo",
keywords = "software development process, taxonomy, testing tools, multi-criteria decision-making",
abstract = "Application life-cycle management (ALM) tools are key for streamlining software development processes. However, small and medium development companies (SMBs) cannot afford to carry out time- and people-intensive tool evaluations for each project, and instead adopt fixed toolsets, thus losing flexibility. To simplify the tool selection process, this article proposes formalizing tool selection as a set of Multiple-Criteria Decision-Making (MCDM) problem, one for each ALM domain. Our domain-parametric recommender takes as inputs a domain, a process definition, and a set of tool evaluation criteria, and yields a ranked list of tools. The approach has been prototyped with the Testing domain and evaluated using a real process and project; the recommendations generated by our approach were quite similar to those of three Testing experts. Pending further evaluation, these results suggest that our approach can generate project-specific tool recommendations with results comparable to those of experts, but at a fraction of the cost."
}
@article{FRANCOBEDOYA2017160,
title = "Open source software ecosystems: A Systematic mapping",
journal = "Information and Software Technology",
volume = "91",
pages = "160 - 185",
year = "2017",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2017.07.007",
url = "http://www.sciencedirect.com/science/article/pii/S0950584917304512",
author = "Oscar Franco-Bedoya and David Ameller and Dolors Costal and Xavier Franch",
keywords = "Software ecosystem, Open source software, Systematic mapping, Literature review, OSS, SECO, OSSECO",
abstract = "Context: Open source software (OSS) and software ecosystems (SECOs) are two consolidated research areas in software engineering. OSS influences the way organizations develop, acquire, use and commercialize software. SECOs have emerged as a paradigm to understand dynamics and heterogeneity in collaborative software development. For this reason, SECOs appear as a valid instrument to analyze OSS systems. However, there are few studies that blend both topics together. Objective: The purpose of this study is to evaluate the current state of the art in OSS ecosystems (OSSECOs) research, specifically: (a) what the most relevant definitions related to OSSECOs are; (b) what the particularities of this type of SECO are; and (c) how the knowledge about OSSECO is represented. Method: We conducted a systematic mapping following recommended practices. We applied automatic and manual searches on different sources and used a rigorous method to elicit the keywords from the research questions and selection criteria to retrieve the final papers. As a result, 82 papers were selected and evaluated. Threats to validity were identified and mitigated whenever possible. Results: The analysis allowed us to answer the research questions. Most notably, we did the following: (a) identified 64 terms related to the OSSECO and arranged them into a taxonomy; (b) built a genealogical tree to understand the genesis of the OSSECO term from related definitions; (c) analyzed the available definitions of SECO in the context of OSS; and (d) classified the existing modelling and analysis techniques of OSSECOs. Conclusion: As a summary of the systematic mapping, we conclude that existing research on several topics related to OSSECOs is still scarce (e.g., modelling and analysis techniques, quality models, standard definitions, etc.). This situation calls for further investigation efforts on how organizations and OSS communities actually understand OSSECOs."
}
@article{LINAKER201817,
title = "Motivating the contributions: An Open Innovation perspective on what to share as Open Source Software",
journal = "Journal of Systems and Software",
volume = "135",
pages = "17 - 36",
year = "2018",
issn = "0164-1212",
doi = "https://doi.org/10.1016/j.jss.2017.09.032",
url = "http://www.sciencedirect.com/science/article/pii/S0164121217302169",
author = "J. Lin√•ker and H. Munir and K. Wnuk and C.E. Mols",
keywords = "Open innovation, Open Source Software, Software ecosystem, Contribution strategy, Product planning, Product strategy",
abstract = "Open Source Software (OSS) ecosystems have reshaped the ways how software-intensive firms develop products and deliver value to customers. However, firms still need support for strategic product planning in terms of what to develop internally and what to share as OSS. Existing models accurately capture commoditization in software business, but lack operational support to decide what contribution strategy to employ in terms of what and when to contribute. This study proposes a Contribution Acceptance Process (CAP) model from which firms can adopt contribution strategies that align with product strategies and planning. In a design science influenced case study executed at Sony Mobile, the CAP model was iteratively developed in close collaboration with the firm‚Äôs practitioners. The CAP model helps classify artifacts according to business impact and control complexity so firms may estimate and plan whether an artifact should be contributed or not. Further, an information meta-model is proposed that helps operationalize the CAP model at the organization. The CAP model provides an operational OI perspective on what firms involved in OSS ecosystems should share, by helping them motivate contributions through the creation of contribution strategies. The goal is to help maximize return on investment and sustain needed influence in OSS ecosystems."
}
@article{HANNAN2011248,
title = "Analysis of the collaborative activities in software development processes from the perspective of chronotopes",
journal = "Computers in Human Behavior",
volume = "27",
number = "1",
pages = "248 - 267",
year = "2011",
note = "Current Research Topics in Cognitive Load Theory",
issn = "0747-5632",
doi = "https://doi.org/10.1016/j.chb.2010.08.003",
url = "http://www.sciencedirect.com/science/article/pii/S0747563210002463",
author = "Mohammad Hannan",
keywords = "Chronotope, Dialogism, Software development process, Software design methodology",
abstract = "The theory of ‚ÄòChronotope‚Äô was introduced by Mikhail Bakhtin in his study of literary genres and subsequently investigated in the fields of media, education, arts, music, film and other disciplines. Class-room chronotopes analyzing student‚Äìteacher collaborative activities in real world have already been investigated by the researchers over a decade, but a similar study is absent in the software world and specially in CSCW (Computer Supported Cooperative Work). The focus of this article is to show how collaborative activities in a software development process in real world might fit into certain types of chronotope, thus applying and extending Bakhtin‚Äôs theory of chronotope in the area of software development process and methodologies, providing further motivation for research and applicability of chronotopes in the area of CSCW."
}
@article{WANG20151,
title = "Comparative case studies of open source software peer review practices",
journal = "Information and Software Technology",
volume = "67",
pages = "1 - 12",
year = "2015",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2015.06.002",
url = "http://www.sciencedirect.com/science/article/pii/S0950584915001068",
author = "Jing Wang and Patrick C. Shih and Yu Wu and John M. Carroll",
keywords = "Open source software, Virtual community, Software peer review, Design",
abstract = "Context
The power of open source software peer review lies in the involvement of virtual communities, especially users who typically do not have a formal role in the development process. As communities grow to a certain extent, how to organize and support the peer review process becomes increasingly challenging. A universal solution is likely to fail for communities with varying characteristics.
Objective
This paper investigates differences of peer review practices across different open source software communities, especially the ones engage distinct types of users, in order to offer contextualized guidance for developing open source software projects.
Method
Comparative case studies were conducted in two well-established large open source communities, Mozilla and Python, which engage extremely different types of users. Bug reports from their bug tracking systems were examined primarily, complemented by secondary sources such as meeting notes, blog posts, messages from mailing lists, and online documentations.
Results
The two communities differ in the key activities of peer review processes, including different characteristics with respect to bug reporting, design decision making, to patch development and review. Their variances also involve the designs of supporting technology. The results highlight the emerging role of triagers, who bridge the core and peripheral contributors and facilitate the peer review process. The two communities demonstrate alternative designs of open source software peer review and their tradeoffs were discussed.
Conclusion
It is concluded that contextualized designs of social and technological solutions to open source software peer review practices are important. The two cases can serve as learning resources for open source software projects, or other types of large software projects in general, to cope with challenges of leveraging enormous contributions and coordinating core developers. It is also important to improve support for triagers, who have not received much research effort yet."
}
@article{FRANKEN2015188,
title = "CloudTeams: Bridging the Gap Between Developers and Customers During Software Development Processes",
journal = "Procedia Computer Science",
volume = "68",
pages = "188 - 195",
year = "2015",
note = "1st International Conference on Cloud Forward: From Distributed to Complete Computing",
issn = "1877-0509",
doi = "https://doi.org/10.1016/j.procs.2015.09.234",
url = "http://www.sciencedirect.com/science/article/pii/S1877050915030793",
author = "Sebastian Franken and Sabine Kolvenbach and Wolfgang Prinz and Iosif Alvertis and Sotiris Koussouris",
keywords = "Cloud Platform, Collaboration, Software Development, User Engagement, Ideation, Crowdsourcing.",
abstract = "The main challenge addressed by the EU-funded project CloudTeams is bridging the communication and collaboration gap between software developers and end users during the whole software development process in order to develop better accepted software. CloudTeams solves the problem by bringing together software developers and end users into one platform, thus providing a seamless environment where interaction with customers will feel natural and will validate the software product. It integrates popular software development tools and services and mashes them up with user participation practices. A sustainable community of end users provides feedback to the development teams at any stage of the software development cycle, from idea generation to beta testing. Through the introduction of novel collaboration and engagement methodologies, CloudTeams facilitates the development process and delivers Software-as-a-Service offerings, which are tested and verified with customers. In this paper we present the CloudTeams approach and the results of the first round of face-to-face interviews with stakeholders of the two user groups on the underlying challenges related to CloudTeams."
}
@article{WEI2017573,
title = "Roles and politeness behavior in community-based free/libre open source software development",
journal = "Information & Management",
volume = "54",
number = "5",
pages = "573 - 582",
year = "2017",
issn = "0378-7206",
doi = "https://doi.org/10.1016/j.im.2016.11.006",
url = "http://www.sciencedirect.com/science/article/pii/S0378720616303512",
author = "Kangning Wei and Kevin Crowston and U.Yeliz Eseryel and Robert Heckman",
keywords = "Open source software development, Core‚Äìperiphery structure, Politeness behavior",
abstract = "Community-based Free/Libre Open Source Software (FLOSS) development relies on contributions from both core and peripheral members. Prior research on core‚Äìperiphery has focused on software coding-related behaviors. We study how core‚Äìperiphery roles are related to social-relational behavior in terms of politeness behavior. Data from two FLOSS projects suggest that both core and peripheral members use more positive politeness strategies than negative strategies. Further, core and peripheral members use different strategies to protect positive face in positive politeness, which we term respect and intimacy, respectively. Our results contribute to FLOSS research and politeness theory."
}
@article{ALMARZOUQ201527,
title = "Taxing the development structure of open source communities: An information processing view",
journal = "Decision Support Systems",
volume = "80",
pages = "27 - 41",
year = "2015",
issn = "0167-9236",
doi = "https://doi.org/10.1016/j.dss.2015.09.004",
url = "http://www.sciencedirect.com/science/article/pii/S0167923615001815",
author = "Mohammad AlMarzouq and Varun Grover and Jason Bennett Thatcher",
keywords = "Free/Libre and Open Source Software, FLOSS, Organizational Information Processing Theory, Software development, Modularity, Brooks' law",
abstract = "Committers in Free/Libre and Open Source Software (FLOSS) projects shoulder responsibility for evaluating contributions and coordinating the broader community development effort. Given committers' central role in development processes, we examine whether how they are organized influences FLOSS community performance. Specifically, drawing on the lens of Organizational Information Processing Theory (OIPT), we develop a model that explains how committal a structure's ability to manage information impacts FLOSS community performance. Based on archival data drawn from 237 active FLOSS communities, we found that the performance of centralized and decentralized FLOSS communities varied with three conditions tied to information flows: task routineness, uncertainty and task interdependence. Our empirical results support the idea that FLOSS communities performing development tasks that are generally routine, highly interdependent, and generate little contributor uncertainty will perform better under a centralized committal structure. On the other hand, decentralized committal structures thrive under the conditions of task non-routineness, low task interdependence, and high contributor uncertainty. We conclude with a discussion of results, limitations, and directions for future research."
}
@article{DANIEL2016159,
title = "Open source project success: Resource access, flow, and integration",
journal = "The Journal of Strategic Information Systems",
volume = "25",
number = "3",
pages = "159 - 176",
year = "2016",
issn = "0963-8687",
doi = "https://doi.org/10.1016/j.jsis.2016.02.006",
url = "http://www.sciencedirect.com/science/article/pii/S0963868716000093",
author = "Sherae Daniel and Katherine Stewart",
keywords = "Project co-membership, Project success, Open source software, Resources, Knowledge",
abstract = "Open source software projects share key resources including knowledge and developer attention. Developers who participate on multiple projects create ties among projects and facilitate access to those projects‚Äô resources. However, projects also compete for developer attention, and they vary in their ability to integrate knowledge. This paper explores how factors that facilitate knowledge integration (low software coupling and high interactive discussion) impact project success and how developers‚Äô attention to external projects may dampen a focal project‚Äôs success. Further, we explore how these factors may moderate the positive impact of a project‚Äôs network degree centrality to develop a more nuanced model of their influences on project success. Using data from 175 OSS projects we find that software coupling, interactive discussion and externally focused developer attention directly impact completed code commits. Interactive discussion also amplifies the benefit of high network degree centrality, while developers‚Äô external attention weakens the positive impact of high network degree centrality. Results add to theory by providing a more nuanced view of how key strategic resources (knowledge and attention) drive OSS success. In particular it describes how knowledge integration ability, developer attention, and network degree centrality interact to influence project outcomes."
}
@Comment{jabref-meta: databaseType:bibtex;}
